Example #1

One of the cases where you want to use Adapter design pattern in Java program is 
while using a third-party library. By making sure, your program uses Adapter,
which is in your control, rather than directly using third-party interface and 
classes, you can anytime replace third-party library, with similar, better 
performing API. You can count this one of the pros of using Adapter pattern.

Example #2
ou can also use Adapter design pattern in Java for conversion classes, 
e.g. Suppose your client do all calculation in Miles and the library you are using 
expects Kilometers. In this case, you can write an Adapter class, which takes miles 
from Client, converts it to Kilometer and leverages external library methods for all 
calculation. While returning a result, it can convert KM back to miles and send the 
result to Client.

Example #3
Adapting an interface of only one class to work with another seems a weak 
example of the GoF Adapter pattern. This pattern uses inheritance and polymorphism, 
so one would expect a good example to show multiple implementations of adapters for 
different adaptees.



 
 

