Possible Relationships between Objects
1. Inheritance
2. Association
3. Composition
4. Aggregation


RELATIONSHIP : 1
----------------
The IS A relationship | Inheritance:
Example: Manager is an employee of XYZ limited corporation.

If you look at the first requirement (Manager is an employee of XYZ limited 
corporation), it’s a parent child relationship or inheritance relationship. 
The sentence above specifies that Manager is a type of employee, 
in other words we will have two classes: parent class Employee, 
and a child class Manager which will inherit from the Employee class.



RELATIONSHIP : 2
----------------

The Using relationship: Association
Example: Manager uses a swipe card to enter XYZ premises.

In this requirement, the manager object and the swipe card object use each other 
but they have their own object life time. In other words, they can exist 
without each other. 
The most important point in this relationship is that there is no single owner.



RELATIONSHIP : 3
----------------
The Using relationship with Parent: Aggregation
Example: Manager has workers who work under him.

The third requirement from our list (Manager has workers who work under him) denotes the same 
type of relationship like association but with a difference that one of them is an owner. So as per 
the requirement, the Manager object will own Worker objects.

The child Worker objects can not belong to any other object. For instance, a Worker object 
cannot belong to a SwipeCard object.

But… the Worker object can have its own life time which is completely 
disconnected from the Manager object. Looking from a different perspective, it means that 
if the Manager object is deleted, the Worker object does not die.
This relationship is termed as an “Aggregation” relationship

RELATIONSHIP : 4
----------------
The Death relationship: Composition
Example: Manager has the responsibility of ensuring that the project is successful.
OR
Manager's salary will be judged based on project success.

Below is the conclusion from analyzing the above requirements:

Manager and the project objects are dependent on each other.
The lifetimes of both the objects are the same. In other words, the project will not be successful 
if the manager is not good, and the manager will not get good increments if the project has issues.
Below is how the class formation will look like. You can also see that when I go to 
create the project object, it needs the manager object.

